# Generated by Django 5.2.6 on 2025-09-07 17:05

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Carrera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=200, unique=True, verbose_name='Nombre de la Carrera')),
                ('codigo', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Formato: AA1234', regex='^[A-Z]{2,4}\\d{2,4}$')], verbose_name='Código')),
                ('descripcion', models.TextField(blank=True, verbose_name='Descripción')),
                ('duracion_años', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Duración en Años')),
                ('activa', models.BooleanField(default=True, verbose_name='Activa')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Carrera',
                'verbose_name_plural': 'Carreras',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Correo Electrónico')),
                ('username', models.CharField(db_column='dni', max_length=8, unique=True, validators=[django.core.validators.RegexValidator(message='El DNI debe tener 8 dígitos', regex='^\\d{8}$')], verbose_name='DNI')),
                ('primer_login', models.BooleanField(default=True, verbose_name='Primer Login')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Alumno',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legajo', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='El legajo debe tener entre 4 y 10 dígitos', regex='^\\d{4,10}$')], verbose_name='Legajo')),
                ('año_ingreso', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2030)], verbose_name='Año de Ingreso')),
                ('activo', models.BooleanField(default=True, verbose_name='Activo')),
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='perfil_alumno', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
                ('carrera', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alumnos', to='gestion_academica.carrera', verbose_name='Carrera')),
            ],
            options={
                'verbose_name': 'Alumno',
                'verbose_name_plural': 'Alumnos',
                'ordering': ['usuario__last_name', 'usuario__first_name'],
            },
        ),
        migrations.CreateModel(
            name='Materia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=200, verbose_name='Nombre de la Materia')),
                ('codigo', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Formato: ABC123', regex='^[A-Z]{2,4}\\d{3,4}$')], verbose_name='Código')),
                ('año', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)], verbose_name='Año')),
                ('cuatrimestre', models.PositiveIntegerField(choices=[(1, 'Primer Cuatrimestre'), (2, 'Segundo Cuatrimestre')], verbose_name='Cuatrimestre')),
                ('cupo_maximo', models.PositiveIntegerField(default=30, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Cupo Máximo')),
                ('descripcion', models.TextField(blank=True, verbose_name='Descripción')),
                ('activa', models.BooleanField(default=True, verbose_name='Activa')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('carrera', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materias', to='gestion_academica.carrera', verbose_name='Carrera')),
            ],
            options={
                'verbose_name': 'Materia',
                'verbose_name_plural': 'Materias',
                'ordering': ['carrera', 'año', 'cuatrimestre', 'nombre'],
                'unique_together': {('carrera', 'codigo')},
            },
        ),
        migrations.CreateModel(
            name='Inscripcion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_inscripcion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Inscripción')),
                ('fecha_baja', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de Baja')),
                ('activa', models.BooleanField(default=True, verbose_name='Activa')),
                ('observaciones', models.TextField(blank=True, verbose_name='Observaciones')),
                ('alumno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inscripciones', to='gestion_academica.alumno', verbose_name='Alumno')),
                ('materia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inscripciones', to='gestion_academica.materia', verbose_name='Materia')),
            ],
            options={
                'verbose_name': 'Inscripción',
                'verbose_name_plural': 'Inscripciones',
                'ordering': ['-fecha_inscripcion'],
                'unique_together': {('alumno', 'materia')},
            },
        ),
    ]
